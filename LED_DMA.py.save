# programs to extract IceCube phase 1 + DeepCore data and prepare for WS2812b LED model 
#
# step 1: extract data from I3 file for DeepCore and Phase1
#         output format: string OM time charge integer
#                        time:          integer in ns 
#                        charge:        integer in units of 10 PE (to the closest integer)
# example:               86 1 300 12 
# 
# step 2: reorder data according to time slice (configurable)
#         start_time, end_time, time_step; from there, calculate n_slice=int(round((end_time-start_time)/time_step))
#         n_slice <= xx 
#
# step 3: calculate, which OM's are on in given time slice
#
# step 4: reorder according to string and OM for each time slice
#
# step 5: reorder strings according to electronics 
#
# step 6: calculate bit pattern for a given time slice for all OMs
# 
# step 7: call c program to put into memory
#
# define a sine wave rainbow color spectrum

import numpy as np
import ctypes
import numpy.ctypeslib as ctl
import argparse


lights=[  0,   0,   0,   0,   0,   1,   1,   2,   2,   3,   4,   5,   6,   7,   8,   9,  11,  12,  13,  15,  17,  18,  20,  
         22,  24,  26,  28,  30,  32,  35,  37,  39,  42,  44,  47,  49,  52,  55,  58,  60,  63,  66,  69,  72,  75,  78,
         81,  85,  88,  91,  94,  97, 101, 104, 107, 111, 114, 117, 121, 124, 127, 131, 134, 137, 141, 144, 147, 150, 154, 
        157, 160, 163, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 202, 205, 208, 210, 213, 215, 217,
        220, 222, 224, 226, 229, 231, 232, 234, 236, 238, 239, 241, 242, 244, 245, 246, 248, 249, 250, 251, 251, 252,
        253, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 253, 253, 252, 251, 251, 250, 249, 248, 246,
        245, 244, 242, 241, 239, 238, 236, 234, 232, 231, 229, 226, 224, 222, 220, 217, 215, 213, 210, 208, 205, 202,
        200, 197, 194, 191, 188, 185, 182, 179, 176, 173, 170, 167, 163, 160, 157, 154, 150, 147, 144, 141, 137, 134,
        131, 127, 124, 121, 117, 114, 111, 107, 104, 101,  97,  94,  91,  88,  85,  81,  78,  75,  72,  69,  66,  63,
         60,  58,  55,  52,  49,  47,  44,  42,  39,  37,  35,  32,  30,  28,  26,  24,  22,  20,  18,  17,  15,  13,  
         12,  11,   9,   8,   7,   6,   5,   4,   3,   2,   2,   1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
          0,   0,   0,   0,   0]

def fillarray(A,slices=0,strings=16,LEDs=60,colour_bits=8):
    # routine to fill bit filled vector H
    #
    # input: 
    #
    # A index 0: timeslice
    # A index 1: string
    # A index 2: DOM
    # A value:   BGR (blue green red)
    #
    # output:
    #
    # H array:
    #            Ch15Ch14Ch13Ch12Ch11Ch10 Ch9 Ch8 Ch7 Ch6 Ch5 Ch4 Ch3 Ch2 Ch1 Ch0
    #               1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
    # Green bit 7:  x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x
    #               0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    #               1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
    # Green bit 6:  x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x 
    #               0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    # ... and so on until ...
    #               1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
    # Green bit 0:  x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x
    #               0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    #               1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
    # Red bit 7:    x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x
    #               0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    # ... and so on until ...
    #               1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1
    # Blue bit 0:   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x   x 
    #               0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
    # .. next LED
    #
    # pointer to buffer for LED n: LED_TX_OSET(n) = LED_PREBITS + LED_DLEN * n
    # buffer length:               TX_BUFF_LEN(n) = LED_TX_OSET(n) + LED_POSTBITS
    #
    # To set one device, send green bits G7 to G0, red bits R7 to R0, and blue bits B7 to B0, in that order
    # Sending more than 24 bits, the extra bits from the data output pin drive the data input of the next LED. 
    # To drive n LEDs, one needs to send n * 24 pulses, with 4 pre and 4 post bits at the beginning and at the end. 
    # If there is a sizeable gap for the reset time or longer, the next transmission will restart at the first LED.
    # 
    # The handling of the pre- and postbits is done in the c code by the definition of the buffer pointers.
    # The switch to the next time slice is handled by a sleep command in the c code.
    #
    temp_green = np.unpackbits(A[:,:,:,0]).reshape(slices,LEDs,strings,colour_bits)  # starts with highest bin
    temp_red   = np.unpackbits(A[:,:,:,1]).reshape(slices,LEDs,strings,colour_bits)  # starts with highest bin
    temp_blue  = np.unpackbits(A[:,:,:,2]).reshape(slices,LEDs,strings,colour_bits)  # starts with highest bin
    Egreen = np.packbits(np.ndarray.transpose(temp_green,(0,1,3,2))).view(np.uint16) # rearange green bins by string
    Ered   = np.packbits(np.ndarray.transpose(temp_red,(0,1,3,2))).view(np.uint16)   # rearange red bins by string
    Eblue  = np.packbits(np.ndarray.transpose(temp_blue,(0,1,3,2))).view(np.uint16)  # rearange blue bins by string
    Ecolour= np.concatenate((Egreen,Ered,Eblue), axis=None)        # concatenate all colors
    in_ones   = range(0,len(Ecolour),1)                            # position to fill ones before color bitpattern 
    temp=np.insert(Ecolour,in_ones,65535)                          # fill in ones for # of strings
    in_zeros  = range(2,len(temp)+1,2)                             # position to fill zeros after color bitpattern 
    return np.insert(temp,in_zeros,0)                              # fill in zeros for # of strings
    

def SineLED(angle):
    return ([lights[(angle+120)%360],lights[angle], lights[(angle+240)%360]]) # return color triple 

def time_slice_index(start,stop,testdata):
    duration=(stop-start)
    index = np.rint(359*(testdata[:,2]-start)/(stop-start)).astype(int)
    return index

def Wipe(arr,color):
    # dimension of arr: 96*3x16x96 !
    # turns on 1 LED more with chosen color for increasing timeslices (same for all strings)
    col=[0xff0000,0x00ff00,0x0000ff]
    length=arr.shape[2]
    for i in range(3):
        for k in range(length):
            arr[k+i*length,:,k]=col[i]
        
def ColorWipe(arr,color):
    # dimension of arr: 96*3x16x96 !
    # turns on 1 LED more with chosen color for increasing timeslices (same for all strings)
    length=arr.shape[2]
    for k in range(length):
        arr[k,:,k]=color
        
def ColorSingleWipe(arr,color):
    # dimension of arr: (96*16)x16x96 !
    # turns on 1 LED more with chosen color for increasing timeslices (string after string)
    for j in range(arr.shape[1]):
        for k in range(arr.shape[2]):
            arr[k+j*arr.shape[2],j,k]=color
    
def RainbowWipe(arr):
    # dimension of arr: 96x16x96 !
    # similar as colorwipe, but changing colours (same for all strings)
    for k in range(arr.shape[0]):
        arr[k,:,k]=SineLED(int(k*360/arr.shape[0]))
        
def ShowString(arr,string_id,color):
    # dimension of arr: 1x16x96 !
    # similar as colorwipe, but changing colours (same for all strings)
    for k in range(arr.shape[2]):
        arr[:,string_id,k]=color

def string_index(string_id):
    # routine to calculate index in largearray for a given string number
    # start with DeepCore string as index 0
    # also use this routine to correct for cabeling and assignment to Raspberry Pi pins
    assign_string=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] # here define electronics mess
    return assign_string[string_id-79]   # start with index 0 and assign to correct rpi channel

def DOM_index(string_id,DOM_id):
    if   string_id < 87: return 59  - (DOM_id-11)    # 0 to 59 starting with lowest DOM 60 to DOM 11
    elif string_id > 86: return 95  - (DOM_id-32)    # 0 to 95 starting with lowest DOM 96 to DOM 32  
    
def Instruments(arr,type):
    if    type == 'pDOM' : 
        color=0xff0000   # red                (pDOM)
        ind=[[string_index(87),DOM_index(87,95)],
             [string_index(88),DOM_index(88,83)],
             [string_index(89),DOM_index(89,77)],
             [string_index(90),DOM_index(90,107)],
             [string_index(91),DOM_index(91,59)],
             [string_index(92),DOM_index(92,35)],
             [string_index(93),DOM_index(93,71)]]   
    elif  type == 'mDOM' : color=0x00ff00   # green              (mDOM)
    elif  type == 'DEgg' : color=0x0000ff   # blue               (DEgg)
    elif  type == 'WOM'  : 
        color=0xfff00    # yellow             (WOM)
        ind=[[string_index(87),DOM_index(87,122)],
             [string_index(87),DOM_index(87,123)],
             [string_index(87),DOM_index(87,124)],
             [string_index(87),DOM_index(87,125)],
             [string_index(88),DOM_index(88,122)],
             [string_index(88),DOM_index(88,123)],
             [string_index(88),DOM_index(88,124)],
             [string_index(88),DOM_index(88,125)],
             [string_index(90),DOM_index(90,122)],
             [string_index(90),DOM_index(90,123)],
             [string_index(90),DOM_index(90,124)],
             [string_index(90),DOM_index(90,125)]]       
    elif  type == 'DMice': 
        color=0xff00ff   # magenta            (DM Ice)
        ind=[[string_index(88),DOM_index(88,126)],
             [string_index(90),DOM_index(90,126)]]       
    elif  type == 'POCAM':
        color=0xfbceb1   # apricot            (POCAM)
        ind=[[string_index(87),DOM_index(87,101)],
             [string_index(88),DOM_index(88,89)],
             [string_index(89),DOM_index(89,53)],
             [string_index(90),DOM_index(90,113)],
             [string_index(91),DOM_index(91,65)],
             [string_index(92),DOM_index(92,41)],
             [string_index(93),DOM_index(93,77)]]   
    elif  type == 'SWE'  : 
        color=0xff1493   # deep pink          (Swedish camera)
        ind=[[string_index(87),DOM_index(87,93)],
             [string_index(88),DOM_index(88,103)],
             [string_index(90),DOM_index(90,114)],
             [string_index(92),DOM_index(92,95)],
             [string_index(93),DOM_index(93,71)]] 
    elif  type == 'AM'   : 
        color=0x8f00ff   # violet             (pencil beam)
        ind=[[string_index(87),DOM_index(87,98)],
             [string_index(88),DOM_index(88,89)],
             [string_index(89),DOM_index(89,50)],
             [string_index(90),DOM_index(90,110)],
             [string_index(91),DOM_index(91,62)],
             [string_index(92),DOM_index(92,38)],
             [string_index(93),DOM_index(93,47)]]   
    elif  type == 'PB'   : 
        color=0xffffff   # white              (acoustic module)
        ind=[[string_index(87),DOM_index(87,83)],
             [string_index(88),DOM_index(88,71)],
             [string_index(89),DOM_index(89,35)],
             [string_index(90),DOM_index(90,95)],
             [string_index(91),DOM_index(91,47)],
             [string_index(92),DOM_index(92,119)],
             [string_index(93),DOM_index(93,59)]]   
    else: print("type",type,"unknown")

    # DEgg:  strings 87-93: DOMs 33,36,39,42,45,48,51,54, 57,60,63,66,69,72,75,78,81,84,87,
    #                            90,95,96,99,102,105,108,111,117,120
    # incomplete: 35,47,59,71,83,93,107,114,119
    # ndarray.flatten, np.put(), ndarray.reshape
    #length=arr.shape[2]
    #for k in range(ind):
        #arr[0,ind[0],ind[1]]=color
        

testdata=np.array([[79, 24, 11788, 9], [79, 26, 11727, 11], [79, 36, 12227, 13], [79, 39, 11463, 10],
                   [80, 23, 12768, 12], [80, 32, 11700, 7], [80, 39, 11452, 4], [80, 41, 11846, 11],
                   [80, 44, 11603, 9], [80, 49, 11893, 11], [81, 16, 3288, 13], [81, 27, 11439, 13], 
                   [81, 27, 11473, 7], [81, 27, 11581, 9], [81, 29, 11370, 13], [81, 30, 11553, 8],
                   [81, 32, 11310, 8], [81, 32, 11342, 7],[81, 33, 11263, 26], [81, 33, 11270, 8],
                   [81, 33, 11309, 8], [81, 33, 11330, 2], [81, 34, 11253, 6], [81, 35, 11281, 3], 
                   [81, 36, 11290, 7], [81, 37, 11841, 13], [81, 38, 11261, 15], [81, 38, 11607, 9],
                   [81, 39, 11234, 29], [82, 12, 12021, 18], [82, 15, 11927, 18], [82, 15, 11965, 5],
                   [82, 18, 12696, 13], [82, 20, 12255, 11], [82, 22, 10660, 14], [82, 22, 11795, 8],
                   [82, 24, 11595, 12], [82, 28, 11528, 13], [82, 29, 11588, 10], [82, 35, 11503, 8], 
                   [82, 37, 12280, 5], [83, 27, 12318, 6],[83, 37, 11774, 8], [83, 44, 12163, 4],
                   [85, 27, 16813, 10], [85, 27, 16826, 8], [85, 27, 21508, 13], [86, 15, 12646, 15],
                   [86, 23, 11755, 7], [86, 33, 11378, 6], [86, 36, 11188, 12], [86, 36, 11770, 12],
                   [86, 37, 13705, 7], [86, 37, 19118, 8], [86, 38, 11109, 18], [86, 39, 11116, 14], 
                   [86, 43, 11159, 7], [87, 30, 11588, 11], [87, 32, 11541, 9], [87, 34, 11519, 9],
                   [87, 35, -2792, 3], [87, 35, -1948, 10], [87, 35, -419, 8], [87, 40, 11551, 8],
                   [87, 42, 9499, 7], [87, 43, 11533, 10], [87,46, 11360, 12], [87, 46, 11863, 11],
                   [87, 48, 11364, 4], [87, 48, 11389, 19], [87, 49, 11786, 8], [87, 49, 13537, 12],
                   [87, 50, 11362, 14], [87, 56, 11711, 10], [87, 60, 19768, 14], [87, 60, 20348, 6],
lights=[  0,   0,   0,   0,   0,   1,   1,   2,   2,   3,   4,   5,   6,   7,   8,   9,  11,  12,  13,  15,  17,  18,  20,  
         22,  24,  26,  28,  30,  32,  35,  37,  39,  42,  44,  47,  49,  52,  55,  58,  60,  63,  66,  69,  72,  75,  78,
         81,  85,  88,  91,  94,  97, 101, 104, 107, 111, 114, 117, 121, 124, 127, 131, 134, 137, 141, 144, 147, 150, 154, 
        157, 160, 163, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 202, 205, 208, 210, 213, 215, 217,
        220, 222, 224, 226, 229, 231, 232, 234, 236, 238, 239, 241, 242, 244, 245, 246, 248, 249, 250, 251, 251, 252,
        253, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 253, 253, 252, 251, 251, 250, 249, 248, 246,
        245, 244, 242, 241, 239, 238, 236, 234, 232, 231, 229, 226, 224, 222, 220, 217, 215, 213, 210, 208, 205, 202,
        200, 197, 194, 191, 188, 185, 182, 179, 176, 173, 170, 167, 163, 160, 157, 154, 150, 147, 144, 141, 137, 134,
        131, 127, 124, 121, 117, 114, 111, 107, 104, 101,  97,  94,  91,  88,  85,  81,  78,  75,  72,  69,  66,  63,
         60,  58,  55,  52,  49,  47,  44,  42,  39,  37,  35,  32,  30,  28,  26,  24,  22,  20,  18,  17,  15,  13,  
         12,  11,   9,   8,   7,   6,   5,   4,   3,   2,   2,   1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
          0,   0,   0,   0,   0]
                   [87, 60, 20928, 9], [87, 60, 22644, 11], [87, 62, -2340, 9], [87, 62, 2443, 10],
                   [87, 68, 11285, 6], [87, 69, 12377, 7], [87, 69, 11257, 4], [87, 70, 11281, 8], 
                   [87,70, 11646, 9], [87, 71, -3944, 11], [87, 71, -2581, 3], [87, 71, 6326, 8],
                   [87, 71, 17350, 7], [87, 72, 11733, 8], [87, 73, 13082, 6], [87, 75, 11308, 12],
                   [87, 77, -2270, 11], [87, 98, 1547, 10], [87, 100, 1883, 11], [88, 15, 12464, 11],
                   [88, 34, 11786, 6], [88, 41, 11772, 18], [88, 42, 12242, 7], [88, 43, 11490, 10],
                   [88, 46, 12432, 15], [88, 47, 20517, 9], [88, 47, 20595, 13], [88, 47, 20632, 14],
                   [88, 47, 21497, 9], [88, 47, 23120, 6], [88, 48, 11534, 6], [88, 50, -2010, 9],
                   [88, 50, -1963, 10], [88, 50, 5477, 18], [88, 50, 18266, 16], [88, 50, 25717, 14],
                   [88, 52, 11748, 11], [88, 61, 11382, 10], [88, 63, 12565, 12], [88, 64, 12167, 7],
                   [88, 70, 11388, 7], [88, 70, 12147, 13], [88, 80, 11782, 6], [88, 93, 12055, 12],
                   [89, 9, 23976, 9], [89, 18, 8368, 17], [89, 22, -1817, 13], [89, 22, 1714, 10],
                   [89, 22, 6267, 8], [89, 22, 17004, 11], [89, 28,1830, 12], [89, 28, 3698, 8],
                   [89, 28, 14979, 6], [89, 36, 12023, 7], [89, 44, 11726, 10], [89, 45, 6356, 10],
                   [89, 46, 12001, 14], [89, 47, 11867, 5], [89, 48, 11626, 7], [89, 61, 11397, 9],
                   [89, 66, 11804, 7], [89, 76, 119, 10], [89, 76, 3294,12], [89, 76, 5285, 4],
                   [89, 81, 10330, 17], [89, 91, -2278, 4], [89, 91, 21615, 5], [90, 13, 22535, 10],
                   [90, 25, 12804, 10], [90, 27, -791, 11], [90, 27, -111, 11], [90, 27, 15451, 3],
                   [90, 27, 23643, 7], [90, 40, 12994, 10], [90, 52, 12765, 8], [90, 57, 11591, 12],
                   [90, 66, 19711, 13], [90, 66, 23289, 12], [90, 66, 11799, 11], [90, 66, 14217, 7],
                   [90, 75, 11564, 10], [90, 75, 11773, 14], [90, 96, -36, 10], [90, 96, 2310, 5],
                   [90, 96, 3168, 7], [90, 96, 10151, 11], [90, 96, 17709, 8],[90, 101, 2117, 7],
                   [90, 101, 10000, 16], [91, 4, 19917, 8], [91, 4, 20095, 7], [91, 4, 20155, 14],
                   [91, 4, 21353, 12], [91, 4, 22546, 15], [91, 27, 11928, 7], [91, 30, 12161, 6],
                   [91, 33, 11793, 6], [91, 35, 11718, 12], [91, 52, 11693, 11], [91, 54, 11590, 4],
                   [91, 57, 11905, 9], [91, 57, 11721, 3], [91, 61, 12209, 8], [91, 62, 11819, 9],
                   [91, 62, 11837, 14], [91, 63, 11519, 9], [91, 70, 11597, 11], [91, 72, 12267, 6],
                   [91, 72, 12529, 16], [91, 72, 20272, 14], [91, 76, 1321, 10], [91, 76, 10865, 4],
                   [91, 89, 6612, 5], [91, 105, 16112, 10], [91, 105, 25755, 18], [91, 110, 8387, 4],
                   [92, 3, 2779, 11], [92, 3, 16306, 7], [92, 3, 3035, 8], [92, 27, 12168, 16],
                   [92, 30, 12239, 5], [92, 30, 15835, 11], [92, 32, 12070, 12], [92, 37, 11626, 19],
                   [92, 40, 11530, 16], [92, 41, 11593, 7], [92, 43, 11510, 12], [92, 45, 11903, 11],
                   [92, 45, 11626, 4], [92, 47,11766, 10], [92, 48, 11629, 8], [92, 49, 11480, 11],
                   [92, 49, 12559, 10], [92, 49, 924, 27], [92, 50, 11414, 9], [92, 50, 11634, 8],
                   [92, 51, 11467, 10], [92, 51, 11682, 7], [92, 55, 11509, 8], [92, 56, 12765, 3],
                   [92, 58, 11358, 12], [92, 58, 12858, 5], [92, 60, 11425, 13], [92, 60, 11711, 11],
                   [92, 62, 11426, 10], [92, 63, 11312, 14], [92, 65, 11342, 5], [92, 65, 11327, 11],
                   [92, 67, 12660, 14], [92, 68, 11316, 6], [92, 70, 11315, 9], [92, 71, 11413, 11],
                   [92, 73, 11399, 11], [92, 74,11334, 7], [92, 80, 11454, 8], [92, 81, 11615, 13],
                   [92, 85, 11929, 3], [92, 97, 11613, 10], [92, 104, 12712, 9], [92, 105, 7519, 10],
                   [92, 105, 7564, 14], [92, 105, 8973, 4], [92, 105, 10049, 11], [92, 105, 23145, 9],
                   [92, 105, 24153, 18], [93,3, 1470, 14], [93, 3, 1714, 9], [93, 3, 3267, 4],
                   [93, 3, 9743, 5], [93, 3, 25338, 4], [93, 29, -2769, 10], [93, 33, 12026, 10],
                   [93, 36, 12928, 12], [93, 41, 12135, 10], [93, 41, 11567, 5], [93, 43, 11480, 11],
                   [93, 47, 11334, 5], [93, 47, 11668, 3], [93, 48, 6908, 5], [93, 48, 6932, 10],
                   [93, 48, 7228, 12], [93, 48, 7594, 11], [93, 48, 10498, 11], [93, 48, 18991, 13],
                   [93, 48, 23057, 7], [93, 48, 11389, 13], [93, 48, 11385, 7], [93, 49, 12399, 12],
                   [93, 51, -1561, 12], [93, 51, 11378,11], [93, 52, 11303, 10], [93, 53, 11415, 8],
                   [93, 54, 11395, 4], [93, 54, 11446, 9], [93, 55, 12042, 9], [93, 55, 13973, 9],
                   [93, 55, 11263, 8], [93, 57, 11237, 9], [93, 58, 11267, 8], [93, 58, 11308, 15],
                   [93, 59, 11218, 11], [93, 59, 11274, 11], [93, 59, 11402, 12], [93, 60, 12124, 6],
                   [93, 63, 848, 10], [93, 67, 11327, 8], [93, 67, 11840, 9], [93, 68, 11180, 18],
                   [93, 68, 11225, 8], [93, 70, 11217, 12], [93, 71, 11302, 3], [93, 71, 19515, 14],
                   [93, 72, 8543, 17], [93, 72, 13628, 6],[93, 72, 14266, 4], [93, 75, 11335, 11],
                   [93, 75, 11424, 9], [93, 77, 11242, 12], [93, 80, 11617, 8], [93, 83, 11336, 11],
                   [93, 93, 11423, 11], [93, 111, -3894, 14], [93, 111, -894, 11], [93, 111, 280, 14],
                   [93, 111, 419, 9], [93, 111, 1891, 17], [93, 111, 4762, 6], [93, 111, 13978, 4],
                   [93, 111, 15874, 3], [93, 111, 17839, 12]])

# ======= read parameters from console =======================================================
'''
working_directory=os.getcwd()                       # get working directory (for default output)

parser = argparse.ArgumentParser(prog='code_LED_preparation',description='make pattern and send to c-program')
parser.add_argument('-i', '--input_filename', metavar='\b',
                    default='json',
                    dest='input_filename',
                    help='input file(s); wildcards allowed (default: test files)')
parser.add_argument('-n', '--number_iterations',metavar='\b', 
                    default=100,
                    dest='iterations',
                    help='# of iterations of pattern (default: 100)')  
parser.add_argument('-d', '--delay_iterations', metavar='\b',
                    default=400,
                    dest='delay',
                    help='delay between iterations (default: 400 [ms])')
parser.add_argument('-p', '--pattern', metavar='\b',
                    default='data',
                    dest='pattern',
                    help ='select pattern' (default: data)')
parser.add_argument('-c', '--color', metavar='\b',
                    default=0xff0000,
                    dest='color',
                    help ='select colour in hex format' (default: red)')
parser.add_argument('-s', '--string', metavar='\b',
                    default=79,
                    dest='string_id',
                    help ='select string number (79-93)' (default: 79)')
parsed, unknown = parser.parse_known_args()
# ============================================================================================

# ============ loop over files ===============================================================
#print(parsed.filename)
filepathnames = glob.glob(parsed.filename)
filenames = [os.path.basename(i) for i in glob.glob(parsed.filename)] # without directory name
print(filenames)
for i in range(len(filepathnames)):
'''
# ==================  select what to display =============================================
colours     = 3     # red green blue
colour_bits = 8     # 8 bits for each colour
# ----------------------------------------------------------------------------------------
wipe=False;wipe3=False;singlewipe=False;rainbow=False;showstring=False;instruments=False;data=True
# ----------------------------------------------------------------------------------------
if wipe or rainbow: slices=96;strings=16;LEDs=96
elif wipe3:         slices=96*3;strings=16;LEDs=96
elif instruments:   slices=1;strings=16;LEDs=96
elif showstring:    slices=1;strings=16;LEDs=96
elif singlewipe:    slices=96*16;strings=16;LEDs=96
elif data:          slices=360;strings=16;LEDs=96
else:               print("option not available")
# ========================================================================================

# ================== set up array for c program depending on what to display =============
largearray = np.empty((slices,strings,LEDs,colours), dtype=np.uint8) 
#print(largearray.shape)
# ========================================================================================

# ========================================================================================
if wipe:         ColorWipe(arr,largearray,0xff0000)
elif rainbow:    RainbowWipe(largearray)
elif singlewipe: ColorSingleWipe(largearray,0xff0000)
elif data:
    #start = np.amin(testdata, axis=0)[2]
    #stop  = np.amax(testdata, axis=0)[2]
    start= 10000
    stop = 15000
    time_index = time_slice_index(start,stop,testdata)
    #print(testdata[:,2])
    #
    # fill large array for easy access time, string and LED ordered 
    # model only shows DOMs 11-60 f..DeepCore and DOMs 32 to 126 for the upgrade (physics region)
    # reorder, so we start with lowest DOM in each string 
    #
    for k in range(len(testdata)):
        string_id = testdata[k,0]
        DOM_id    = testdata[k,1]
        pulse_time= testdata[k,2]
        if pulse_time < start or pulse_time > stop: continue
        elif string_id < 87 and DOM_id < 11:   continue
        elif string_id < 87 and DOM_id > 60:   continue
        elif string_id > 86 and DOM_id < 33:   continue
        elif string_id > 86 and DOM_id > 126:  continue
        #print(string_id,string_index,DOM_id,DOM_index)
        largearray[time_index[k],string_index(string_id),DOM_index(string_id,DOM_id)]=SineLED(time_index[k])
# ========================================================================================

#print(largearray)

to_c_code=fillarray(largearray,slices,strings,LEDs,colour_bits)
print(to_c_code)


testlib=ctypes.CDLL('/home/pi/model/LED_DMA.so')
py_test=testlib.LED_DMA
py_test.argtypes = [ctl.ndpointer(np.uint16,flags='aligned,c_contiguous'),ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.c_int]
py_test(to_c_code,1,60,1,100)

'''
Using ctypes :
Python ctypes will come to play but make sure the C code, that is to be converted, has been compiled into a shared library that is compatible with the Python interpreter (e.g., same architecture, word size, compiler, etc.).

Further the libsample.so file has been placed in the same directory as the work.py. Let’s understand work.py now.

import ctypes
NUM = 16     
# libfun loaded to the python file
# using fun.myFunction(),
# C function can be accessed
# but type of argument is the problem.
                        
fun = ctypes.CDLL("libfun.so") # Or full path to file 
# Now whenever argument will be passed to the function, ctypes will check it.
           
fun.myFunction.argtypes = [ctypes.c_int]
 
# now we can call this function using instant (fun)
# returnValue is the value
# return by function written in C
# code
returnVale = fun.myFunction(NUM)   

'''
